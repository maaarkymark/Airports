package airportsrestful;

import java.io.IOException;

import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.json.simple.parser.ParseException;

public class AirportsRestful extends javax.swing.JFrame {

    private DataLayer dl;
    private DefaultListModel<Airport> modelAirportsList = new DefaultListModel<>();
    private Airport airport = new Airport();
    private int rowCount;
    private int newRowCount;
    private String getAddNewUrl = "/airports";
    private String removeUpdateUrl = "/airports/";

    /**
     * Creates new form AirportsDB
     */
    public AirportsRestful() {
        try {
            dl = new DataLayer();
            initComponents();
            reloadList();
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to connect to database, exiting.\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstAirports = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btAddNew = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btUpdate = new javax.swing.JButton();
        btFindNearestOtherAirport = new javax.swing.JButton();
        tfCode = new javax.swing.JTextField();
        tfName = new javax.swing.JTextField();
        tfCity = new javax.swing.JTextField();
        tfCountry = new javax.swing.JTextField();
        tfElevation = new javax.swing.JTextField();
        tfLatitude = new javax.swing.JTextField();
        tfLongitude = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lstAirports.setModel(modelAirportsList);
        lstAirports.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstAirports.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstAirportsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstAirports);

        jLabel1.setText("Code:");

        jLabel2.setText("Name:");

        jLabel3.setText("City:");

        jLabel4.setText("Country:");

        jLabel5.setText("Elevation:");

        jLabel6.setText("Latitude:");

        jLabel7.setText("Longitude:");

        btAddNew.setText("Add New");
        btAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddNewActionPerformed(evt);
            }
        });

        btDelete.setText("Delete");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btUpdate.setText("Update");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });

        btFindNearestOtherAirport.setText("Find Nearest Other Airport");
        btFindNearestOtherAirport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFindNearestOtherAirportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(tfCode)
                            .addComponent(tfName, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btFindNearestOtherAirport, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btAddNew, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(18, 18, 18)
                            .addComponent(btUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tfLongitude))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addGap(18, 18, 18)
                            .addComponent(tfLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tfCity)
                                .addComponent(tfCountry)
                                .addComponent(tfElevation)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(tfCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tfCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tfCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(tfElevation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfLatitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(tfLongitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btAddNew)
                            .addComponent(btDelete)
                            .addComponent(btUpdate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(btFindNearestOtherAirport)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void reloadList() {
        try {
            ArrayList<Airport> list = dl.getAllAirports();
            modelAirportsList.clear();
            for (Airport airport : list) {
                modelAirportsList.addElement(airport);
            }
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to load data\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
        } catch (ParseException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to load data\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to load data\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearTextFields() {
        tfCode.setText("");
        tfName.setText("");
        tfCity.setText("");
        tfCountry.setText("");
        tfElevation.setText("");
        tfLatitude.setText("");
        tfLongitude.setText("");
    }

    /*
        private void shortestAirportDistance() {
        try {
            String code = lstAirports.getSelectedValue().getCode();
            double latSelected1 = dl.getAirport(code).getLatitude();
            double longSelected1 = dl.getAirport(code).getLongitude();
            double latSelected2 = 0.0;
            double longSelected2 = 0.0;
            double totalDistance = 0.0;
            System.out.println("Latitude: " + latSelected1 + ", Longitude: " + longSelected1);
            ArrayList<Airport> list2 = dl.getAllAirports();
            totalDistance = distance(latSelected1, longSelected1, latSelected2, longSelected2);
            System.out.println(totalDistance);
            JOptionPane.showMessageDialog(null, "Airport: " + dl.getAirport(code) + "\n" + "Distance: " + totalDistance + " km", "Closest Airport Information", JOptionPane.INFORMATION_MESSAGE);
        } catch (NullPointerException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to load data\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
        }
    }
     */
    // This function calculates the distance by latitude and longitude
    private double distance(double lat1, double long1, double lat2, double long2) {
        double theta = long1 - long2;
        double dist = Math.sin(deg2Rad(lat1)) * Math.sin(deg2Rad(lat2)) + Math.cos(deg2Rad(lat1)) * Math.cos(deg2Rad(lat2)) * Math.cos(deg2Rad(theta));
        dist = Math.acos(dist);
        dist = rad2Deg(dist);
        dist = dist * 60 * 1.1515; // Miles
        dist = dist * 1.609344; // Kilometers
        return (dist);
    }

    // This function converts decimal degrees to radians
    private double deg2Rad(double deg) {
        return (deg * Math.PI / 180.0);
    }

    // This function converts radians to decimal degrees
    private double rad2Deg(double rad) {
        return (rad * 180 / Math.PI);
    }

    private void btAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddNewActionPerformed
        try {
            rowCount = lstAirports.getModel().getSize();
            airport.setCode(tfCode.getText());
            airport.setName(tfName.getText());
            airport.setCity(tfCity.getText());
            airport.setCountry(tfCountry.getText());
            airport.setElevation(Integer.parseInt(tfElevation.getText()));
            airport.setLatitude(Double.parseDouble(tfLatitude.getText()));
            airport.setLongitude(Double.parseDouble(tfLongitude.getText()));
            System.out.println("GET /api returned:");
            System.out.println(dl.getDataFromUrl(getAddNewUrl));
            dl.sendDataToUrl(getAddNewUrl);
            //reloadList();
            clearTextFields();
            JOptionPane.showMessageDialog(null, "Airport was successfully added!", "Add message", JOptionPane.INFORMATION_MESSAGE);
            /*
            newRowCount = lstAirports.getModel().getSize();
            if (newRowCount > rowCount) {
                JOptionPane.showMessageDialog(null, "Airport was successfully added!", "Add message", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Failed to add airport", "Add message", JOptionPane.ERROR_MESSAGE);
            }
             */
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to create data\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(AirportsRestful.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to create data\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(AirportsRestful.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(null, "Exception during airport creation:\n" + ex.getMessage(), "Invalid input error", JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(AirportsRestful.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RuntimeException ex) {
            JOptionPane.showMessageDialog(null, "Exception during airport creation:\n" + ex.getMessage(), "Invalid input error", JOptionPane.ERROR_MESSAGE);
        }
        /*
            airport.setName(tfName.getText());
            airport.setCity(tfCity.getText());
            airport.setCountry(tfCountry.getText());
            airport.setElevation(Integer.parseInt(tfElevation.getText()));
            airport.setLatitude(Double.parseDouble(tfLatitude.getText()));
            airport.setLongitude(Double.parseDouble(tfLongitude.getText()));
            dl.createAirport(airport);
            reloadList();
            clearTextFields();
            newRowCount = lstAirports.getModel().getSize();
            if (newRowCount > rowCount) {
                JOptionPane.showMessageDialog(null, "Airport was successfully added!", "Add message", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Failed to add airport", "Add message", JOptionPane.ERROR_MESSAGE);
            }
        } catch (MalformedURLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to create data\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(null, "Exception during airport creation:\n" + ex.getMessage(), "Invalid input error", JOptionPane.ERROR_MESSAGE);
        }
         */
    }//GEN-LAST:event_btAddNewActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        try {
            System.out.println(dl.getDataFromUrl2(getAddNewUrl));
            //System.out.println("GET /api returned:");
            //System.out.println(dl.getDataFromUrl(getAddNewUrl));
            dl.removeDataFromUrl(removeUpdateUrl + tfCode.getText());
            //reloadList();
            clearTextFields();
            JOptionPane.showMessageDialog(null, "Airport was successfully deleted!", "Delete message", JOptionPane.INFORMATION_MESSAGE);
            /*
            newRowCount = lstAirports.getModel().getSize();
            if (newRowCount < rowCount) {
                JOptionPane.showMessageDialog(null, "Airport was successfully deleted!", "Delete message", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Failed to delete airport", "Delete message", JOptionPane.ERROR_MESSAGE);
            }
             */
        } catch (IOException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to delete data\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(AirportsRestful.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to delete data\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(AirportsRestful.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RuntimeException ex) {
            JOptionPane.showMessageDialog(null, "Unable to delete data\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
        }
        /*
        try {
            rowCount = lstAirports.getModel().getSize();
            dl.deleteAirport(tfCode.getText());
            reloadList();
            clearTextFields();
            newRowCount = lstAirports.getModel().getSize();
            if (newRowCount < rowCount) {
                JOptionPane.showMessageDialog(null, "Airport was successfully deleted!", "Delete message", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Failed to delete airport", "Delete message", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to delete data\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
        }
         */
    }//GEN-LAST:event_btDeleteActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        try {
            airport.setName(tfName.getText());
            airport.setCity(tfCity.getText());
            airport.setCountry(tfCountry.getText());
            airport.setElevation(Integer.parseInt(tfElevation.getText()));
            airport.setLatitude(Double.parseDouble(tfLatitude.getText()));
            airport.setLongitude(Double.parseDouble(tfLongitude.getText()));
            System.out.println("GET /api returned:");
            System.out.println(dl.getDataFromUrl(getAddNewUrl));
            dl.updateDataFromUrl(removeUpdateUrl + tfCode.getText());
            //reloadList();
            clearTextFields();
            JOptionPane.showMessageDialog(null, "Airport was successfully updated!", "Update message", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(AirportsRestful.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(AirportsRestful.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(null, "Exception during airport creation:\n" + ex.getMessage(), "Invalid input error", JOptionPane.ERROR_MESSAGE);
        }
        /*
        try {
            airport.setCode(tfCode.getText());
            airport.setName(tfName.getText());
            airport.setCity(tfCity.getText());
            airport.setCountry(tfCountry.getText());
            airport.setElevation(Integer.parseInt(tfElevation.getText()));
            airport.setLatitude(Double.parseDouble(tfLatitude.getText()));
            airport.setLongitude(Double.parseDouble(tfLongitude.getText()));
            dl.updateAirport(airport);
            reloadList();
            clearTextFields();
            JOptionPane.showMessageDialog(null, "Airport was successfully updated!", "Update message", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to update data\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException ex) {
            JOptionPane.showMessageDialog(null, "Exception during airport creation:\n" + ex.getMessage(), "Invalid input error", JOptionPane.ERROR_MESSAGE);
        }
         */
    }//GEN-LAST:event_btUpdateActionPerformed

    private void btFindNearestOtherAirportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFindNearestOtherAirportActionPerformed
        //shortestAirportDistance();
    }//GEN-LAST:event_btFindNearestOtherAirportActionPerformed

    private void lstAirportsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstAirportsMouseClicked
        /*
        try {
        
            String code = lstAirports.getSelectedValue().getCode();
            tfCode.setText(code);
       
            tfName.setText(dl.getAirport(code).getName());
            tfCity.setText(dl.getAirport(code).getCity());
            tfCountry.setText(dl.getAirport(code).getCountry());
            tfElevation.setText(Integer.toString(dl.getAirport(code).getElevation()));
            tfLatitude.setText(Double.toString(dl.getAirport(code).getLatitude()));
            tfLongitude.setText(Double.toString(dl.getAirport(code).getLongitude()));
         */
 /* } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to get data\n" + ex.getMessage(), "Database error", JOptionPane.ERROR_MESSAGE);
        }
         */
    }//GEN-LAST:event_lstAirportsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AirportsRestful.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AirportsRestful.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AirportsRestful.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AirportsRestful.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AirportsRestful().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddNew;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btFindNearestOtherAirport;
    private javax.swing.JButton btUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Airport> lstAirports;
    private javax.swing.JTextField tfCity;
    private javax.swing.JTextField tfCode;
    private javax.swing.JTextField tfCountry;
    private javax.swing.JTextField tfElevation;
    private javax.swing.JTextField tfLatitude;
    private javax.swing.JTextField tfLongitude;
    private javax.swing.JTextField tfName;
    // End of variables declaration//GEN-END:variables

}
